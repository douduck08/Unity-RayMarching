#pragma kernel CSMain

#define SDF sdf_volume
sampler3D _VolumeTex;
float4x4 _VolumeInvTransform;
float sdf_volume (float3 pos) {
    pos = mul(_VolumeInvTransform, float4(pos, 1)).xyz;
    return tex3Dlod (_VolumeTex, float4(pos, 0)).r * 2.0 - 1.0;
}

#include "../RayMarching.cginc"

RWTexture2D<float4> Result;

float3 shading (float3 viewDir, float3 normal, float3 color, float metallic, float smoothness) {
    float3 lightDir = _WorldSpaceLightPos0.xyz;

#ifdef SDF_SHADOW
    float atten = get_atten (pos, lightDir);
#else
    float atten = 1.0;
#endif

    float3 specColor;
    float oneMinusReflectivity;
    float3 albedo = DiffuseAndSpecularFromMetallic(color, metallic, /*out*/specColor, /*out*/oneMinusReflectivity);

    UnityLight light;
    UNITY_INITIALIZE_OUTPUT(UnityLight, light);
    light.dir = lightDir;
    light.color = _LightColor0.rgb * atten;
    light.ndotl = saturate(dot(normal, light.dir));

    UnityIndirect indirectLight;
    UNITY_INITIALIZE_OUTPUT(UnityIndirect, indirectLight);
    indirectLight.diffuse += max(0, ShadeSH9(float4(normal, 1)));

    // return UNITY_BRDF_PBS(albedo, specColor, oneMinusReflectivity, smoothness, normal, viewDir, light, indirectLight); // has texture sampler error
    return atten * light.color * light.ndotl;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2(1.0 / width * id.x, 1.0 / height * id.y);
    float3 rayOrigin = _WorldSpaceCameraPos;
    float3 rayDirection = _FrustumCorners[0].xyz + (_FrustumCorners[3].xyz - _FrustumCorners[0].xyz) * uv.x + (_FrustumCorners[1].xyz - _FrustumCorners[0].xyz) * uv.y;
    rayDirection = mul((float3x3)unity_CameraToWorld, rayDirection);
    rayDirection = normalize(rayDirection);

    float2 output = ray_marching(rayOrigin, rayDirection);
    if (output.y < 0) {
        Result[id.xy] = 0;
        return;
    }

    float3 pos = rayOrigin + rayDirection * output.x;
    float3 normal = get_normal(pos);
    float3 color = shading(-rayDirection, normal, float3(1, 1, 1), 0.02, 0.5);

    Result[id.xy] = float4(color, 0.0);
}
