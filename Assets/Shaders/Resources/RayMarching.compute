#pragma kernel CSMain

#include "UnityCG.cginc"
#include "UnityPBSLighting.cginc"
#include "AutoLight.cginc"

#define CAMERA_NEAR_CLIP 0.1
#define MAX_RAY_MARCHING_STEP 256
#define MAX_RAY_MARCHING_DISTANCE 100.0
#define MAX_RAY_MARCHING_PRECISION 0.001
#define SOFT_SHADOW_TYPE 0

sampler3D sdfVolumeTexture0;
sampler3D sdfVolumeTexture1;
sampler3D sdfVolumeTexture2;
sampler3D sdfVolumeTexture3;

float4x4 cameraFrustumCorners;
int volumeInstanceNumber;
RWStructuredBuffer<int> volumeIndexBuffer;
RWStructuredBuffer<float4x4> inverseMatrixBuffer;
RWTexture2D<float4> result;

float3 GetRayDirection (float2 uv) {
    return cameraFrustumCorners[0].xyz + uv.x * (cameraFrustumCorners[3].xyz - cameraFrustumCorners[0].xyz) + uv.y * (cameraFrustumCorners[1].xyz - cameraFrustumCorners[0].xyz);
}

float4 SampleSdfInstance (int index, float3 pos) {
    pos = mul(inverseMatrixBuffer[index], float4(pos, 1)).xyz;
    float4 uv = float4(pos + 0.5, 0);
    int volumeIndex = volumeIndexBuffer[index];

    float4 df;
    if (volumeIndex == 0) { df = tex3Dlod(sdfVolumeTexture0, uv); } 
    else if (volumeIndex == 1) { df = tex3Dlod(sdfVolumeTexture1, uv); } 
    else if (volumeIndex == 2) { df = tex3Dlod(sdfVolumeTexture2, uv); }
    else { df = tex3Dlod(sdfVolumeTexture3, uv); }

    df = df * 2.0 - 1.0;
    return df;
}

float4 SampleGlobalSdf (float3 pos) {
    float4 df = float4(0, 0, 0, 1e20);
    float4 temp_df;
    for (int i = 0; i < volumeInstanceNumber; i++) {
        temp_df = SampleSdfInstance(i, pos);
        if (temp_df.w < df.w) {
            df = temp_df;
        }
    }
    return df;
}

float RayMarching (float3 ray_origin, float3 ray_direction, out float3 pos, out float3 normal) {
    float4 df;
    float dis = MAX_RAY_MARCHING_PRECISION * 2.0;
    float ray_distance = 0.0;

    for (int i = 0; i < MAX_RAY_MARCHING_STEP; i++) {
        if(dis < MAX_RAY_MARCHING_PRECISION || ray_distance > MAX_RAY_MARCHING_DISTANCE) break;
        ray_distance += dis;
        pos = ray_origin + ray_direction * ray_distance;

        df = SampleGlobalSdf(pos);
        dis = df.w;
        normal = normalize(df.xyz);
    }

    float m = ray_distance > MAX_RAY_MARCHING_DISTANCE ? -1.0 : 1.0;
    return m;
}

float GetLightAtten (float3 pixel_pos, float3 light_dir) {
    float3 pos;
    float dis = MAX_RAY_MARCHING_PRECISION * 10.0;
    float ray_distance = 0.0;

#if SOFT_SHADOW_TYPE == 1
    const float k = 8;
#elif SOFT_SHADOW_TYPE == 2
    const float k = 8;
    float pre_dis = 1e20;
    float y, d;
#endif

    float rest = 1.0;
    for (int i = 0; i < MAX_RAY_MARCHING_STEP; i++) {
        if(dis < MAX_RAY_MARCHING_PRECISION || ray_distance > MAX_RAY_MARCHING_DISTANCE) break;
        ray_distance += dis;
        pos = pixel_pos + light_dir * ray_distance;
        dis = SampleGlobalSdf(pos).w;

        // TODO: need to fix, soft shadow not work, because distance doesn't rescale into world space
#if SOFT_SHADOW_TYPE == 1
        rest = min(rest, k * dis / ray_distance);
#elif SOFT_SHADOW_TYPE == 2
        y = dis * dis / (2.0 * pre_dis);
        d = sqrt(dis * dis - y * y);
        rest = min(rest, k * dis / max(0.0, ray_distance - y));
        pre_dis = dis;
#endif
    }

    float atten = ray_distance > MAX_RAY_MARCHING_DISTANCE ? rest : 0.0;
    return atten;
}

float3 Shading (float3 viewDir, float3 pos, float3 normal, float3 color, float metallic, float smoothness) {
    float3 lightDir = _WorldSpaceLightPos0.xyz;
    float atten = GetLightAtten(pos, lightDir);

    float3 specColor;
    float oneMinusReflectivity;
    float3 albedo = DiffuseAndSpecularFromMetallic(color, metallic, /*out*/specColor, /*out*/oneMinusReflectivity);

    UnityLight light;
    UNITY_INITIALIZE_OUTPUT(UnityLight, light);
    light.dir = lightDir;
    light.color = _LightColor0.rgb * atten;
    light.ndotl = saturate(dot(normal, light.dir));

    UnityIndirect indirectLight;
    UNITY_INITIALIZE_OUTPUT(UnityIndirect, indirectLight);
    indirectLight.diffuse += max(0, ShadeSH9(float4(normal, 1)));

    // TODO: fix texture sampler error
    // return UNITY_BRDF_PBS(albedo, specColor, oneMinusReflectivity, smoothness, normal, viewDir, light, indirectLight); 
    return atten * light.color * light.ndotl;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint width, height;
    result.GetDimensions(width, height);

    float2 texelSize = rcp(float2(width, height));
    float2 uv = float2(id.x * texelSize.x, id.y * texelSize.y);
    float3 dir = normalize(GetRayDirection(uv));
    float3 origin = _WorldSpaceCameraPos + dir * CAMERA_NEAR_CLIP;

    float3 pos, normal;
    float output = RayMarching(origin, dir, pos, normal);

    if (output < 0) {
        result[id.xy] = 0;
        return;
    }

    float3 color = Shading(-dir, pos, normal, float3(1, 1, 1), 0.02, 0.5); // TODO: material
    result[id.xy] = float4(color, 1);
}
